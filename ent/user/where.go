// Code generated by ent, DO NOT EDIT.

package user

import (
	"docuSync/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// HasAllowedDocuments applies the HasEdge predicate on the "allowed_documents" edge.
func HasAllowedDocuments() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, AllowedDocumentsTable, AllowedDocumentsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAllowedDocumentsWith applies the HasEdge predicate on the "allowed_documents" edge with a given conditions (other predicates).
func HasAllowedDocumentsWith(preds ...predicate.Document) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newAllowedDocumentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwnedDocuments applies the HasEdge predicate on the "owned_documents" edge.
func HasOwnedDocuments() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OwnedDocumentsTable, OwnedDocumentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnedDocumentsWith applies the HasEdge predicate on the "owned_documents" edge with a given conditions (other predicates).
func HasOwnedDocumentsWith(preds ...predicate.Document) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newOwnedDocumentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEditedDocuments applies the HasEdge predicate on the "edited_documents" edge.
func HasEditedDocuments() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, EditedDocumentsTable, EditedDocumentsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEditedDocumentsWith applies the HasEdge predicate on the "edited_documents" edge with a given conditions (other predicates).
func HasEditedDocumentsWith(preds ...predicate.Document) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newEditedDocumentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
